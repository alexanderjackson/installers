#!/bin/bash
(
#
# lemp-on-debian-jessie-amd64
#
# Copyright 2015, Alexander Jackson <alexander.jackson@jackson-it.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to debug
set -x


# -------------------------------------------
# Vars
# -------------------------------------------
export DEBIAN_FRONTEND=noninteractive
OLD_HOSTNAME=$(hostname -f)

if [ ! -f /usr/bin/lsb_release ]; then
  apt-get update
  apt-get install lsb-release -y
fi

OS=$(lsb_release -c | awk '{ print $2 }')
OS_DESC=$(lsb_release -d | awk -F':' '{ print $2}')


# -------------------------------------------
# Get hostname
# -------------------------------------------
echo "Geben Sie jetzt die neue Domain bzw. Hostadresse ohne den www-Anteil an"
read -e -p "Hostname:" -i " ${OLD_HOSTNAME}" HOSTNAME
cat <<EOF

  Der eingegebene Hostname lautet: ${HOSTNAME}
  -------------------------------------------
  Automatische Installation mit ENTER starten. Abruch mit STRG-C...

EOF
read dummy


# -------------------------------------------
# Change hostname
# -------------------------------------------
eval "sed -i 's/${OLD_HOSTNAME}/${HOSTNAME}/g' /etc/hosts"
cat > /etc/hostname <<EOF
${HOSTNAME}
EOF
/etc/init.d/hostname.sh start


# -------------------------------------------
# Change root password
# -------------------------------------------
passwd


# -------------------------------------------
# Change SSH Port to ${SSH_PORT}
# -------------------------------------------
SSH_PORT=$(shuf -i 2000-65000 -n 1)

eval "sed -i 's/Port 22/Port ${SSH_PORT}/' /etc/ssh/sshd_config"
systemctl restart ssh
eval "sed -i 's/ssh\t\t22/ssh\t\t${SSH_PORT}/' /etc/services"
systemctl restart ssh


# -------------------------------------------
# Update OS
# -------------------------------------------
apt-get update
apt-get upgrade -y


# -------------------------------------------
# Install basics
# -------------------------------------------
cat > /tmp/postfix.preesed << EOF
postfix postfix/rfc1035_violation       boolean false
postfix postfix/recipient_delim string   +
postfix postfix/root_address    string
postfix postfix/sqlite_warning  boolean
postfix postfix/chattr  boolean false
# Install postfix despite an unsupported kernel?
postfix postfix/kernel_version_warning  boolean
# Postfix not configured
postfix postfix/destinations    string  ${HOSTNAME}, localhost.${HOSTNAME}, localhost
postfix postfix/mailname        string  ${HOSTNAME}
postfix postfix/mynetworks      string  127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
postfix postfix/main_mailer_type        select   Internet Site
postfix postfix/retry_upgrade_warning   boolean
postfix postfix/relay_restrictions_warning      boolean
postfix postfix/relayhost       string
postfix postfix/tlsmgr_upgrade_warning  boolean
postfix postfix/mydomain_warning        boolean
postfix postfix/mailbox_limit   string   0
postfix postfix/procmail        boolean false
postfix postfix/protocols       select  all
EOF

cat /tmp/postfix.preesed | debconf-set-selections

echo "unattended-upgrades     unattended-upgrades/enable_auto_updates boolean true" | debconf-set-selections

apt-get install nano nload tmux pwgen mc htop bash-completion postfix mailutils logwatch apticron openssl unattended-upgrades -y


# -------------------------------------------
# Enable autoupgrades
# -------------------------------------------
dpkg-reconfigure unattended-upgrades


# -------------------------------------------
# Setup Postfix mail server
# -------------------------------------------
echo "root: root.$(hostname -f)@jackson-it.de" >> /etc/aliases
newaliases
dpkg-reconfigure postfix


# -------------------------------------------
# Security programs
# -------------------------------------------
apt-get install ufw fail2ban -y


# -------------------------------------------
# Activate ufw firewall
# -------------------------------------------
for i in ssh http https ; do ufw allow $i; done
yes | ufw enable


# -------------------------------------------
# NGINX
# -------------------------------------------
cat > /etc/apt/sources.list.d/nginx.list <<EOF
# NGINX Repository
deb http://nginx.org/packages/mainline/debian/ ${OS} nginx
deb-src http://nginx.org/packages/mainline/debian/ ${OS} nginx
EOF
wget -O - http://nginx.org/packages/keys/nginx_signing.key | apt-key add -

apt-get update
apt-get upgrade -y

apt-get install nginx -y

cat > /etc/nginx/nginx.conf <<'ENDOFFILE'
user www-data www-data;
worker_processes  1;
events {
        worker_connections 8096;
        multi_accept on;
        use epoll;
}
pid /var/run/nginx.pid;
worker_rlimit_nofile 40000;
http {
        add_header Strict-Transport-Security max-age=31536000;
        server_tokens off;
        server_names_hash_bucket_size 128;
        client_max_body_size 50M;
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        client_body_timeout 12;
        client_header_timeout 12;
        keepalive_timeout 15;
        send_timeout 10;
        gzip on;
        gzip_vary on;
        gzip_proxied expired no-cache no-store private auth any;
        gzip_comp_level 9;
        gzip_min_length 1400;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss font/woff2;
        gzip_disable "MSIE [1-6].";
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
        map $scheme $php_https { default off; https on; }
        include perfect-forward-secrecy.conf;

        # WordPress optimierungen
        client_body_buffer_size 100m;
}
ENDOFFILE



# -------------------------------------------
# Setup perfect forward secrecy with fast, not so safe DH creation
# -------------------------------------------
openssl dhparam -dsaparam -out /etc/nginx/dh4096.pem 4096

cat > /etc/nginx/perfect-forward-secrecy.conf <<'EOF'
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA";
ssl_dhparam dh4096.pem;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;
EOF


# -------------------------------------------
# Fix NGINX worker_processes to number of CPU cores
# -------------------------------------------
CPUS=$(cat /proc/cpuinfo | grep processor | wc | awk '{ print $1 }')
eval "sed -i 's/worker_processes.*/worker_processes  $CPUS;/g' /etc/nginx/nginx.conf"


# -------------------------------------------
# NGINX configuration
# -------------------------------------------
rm -r /etc/nginx/conf.d/*

cat > /etc/nginx/conf.d/default.conf <<'ENDOFILE'
server {
        listen       80;
        server_name  ${HOSTNAME} *.${HOSTNAME};
        # return 301 https://$http_host$request_uri; # Uncomment to force https redirect

        root /var/www/${HOSTNAME}/public/;

        index index.php index.html;

        location / {
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                try_files $uri /index.php;
                include fastcgi_params;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_read_timeout 300;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_index index.php;
        }

        location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|js|css|png|jpg|jpeg|gif|ico)$ {
                #access_log off;
                expires max;
                log_not_found off;
        }

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        location ~ /\. {
                deny  all;
                access_log off;
                log_not_found off;
        }
}


server {
        listen       443 spdy;
        server_name  ${HOSTNAME} *.${HOSTNAME};

        spdy_headers_comp 6;

        ssl on;
        ssl_certificate /etc/nginx/ssl/bettenkunst.crt;
        ssl_certificate_key /etc/nginx/ssl/bettenkunst.key;

        root /var/www/${HOSTNAME}/public/;

        index index.php index.html;

        location / {
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                try_files $uri /index.php;
                include fastcgi_params;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_read_timeout 300;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_index index.php;
        }

        location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|js|css|png|jpg|jpeg|gif|ico)$ {
                #access_log off;
                expires max;
                log_not_found off;
        }

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        location ~ /\. {
                deny  all;
                access_log off;
                log_not_found off;
        }
}

server {
        listen       80;
        server_name  phpmyadmin.${HOSTNAME};
        return 301 https://$http_host$request_uri;
        }

server {
        listen       443 spdy;
        server_name  phpmyadmin.${HOSTNAME};

        ssl on;
        ssl_certificate /etc/ssl/certs/bettenkunst.crt;
        ssl_certificate_key /etc/ssl/private/bettenkunst.key;

        root /usr/share/phpmyadmin;

        index index.php;

        location / {
                try_files $uri $uri/ /index.php?$args;
                auth_basic "Restricted";
                auth_basic_user_file /etc/nginx/.htpasswd;
        }

        location ~ \.php$ {
                try_files $uri =404;
                include fastcgi_params;
                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_index index.php;
                fastcgi_buffer_size 128k;
                fastcgi_buffers 256 4k;
                fastcgi_busy_buffers_size 256k;
                fastcgi_temp_file_write_size 256k;
                fastcgi_read_timeout 240;
        }
}
ENDOFILE

mkdir -p /var/www/${HOSTNAME}/public/ /var/www/.ssh/
cat > /var/www/${HOSTNAME}/public/index.html << EOF
Hello World!
EOF

cat > /var/www/.ssh/authorized_keys << EOF
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCx3cY/DiXiowLqIY5BmexLxXG/NczjnWTVvw/koUF1KWjpDejjqExCzguuWhhy1+6DpwO/opG2HzkxJO2EmzhEKteYXaRE1vsojAniWuBAsW6I2jvHIV8pmabD8ZXLr7suF2FnsqxOXQDsrbfDYnlXBXBo1A3NScBKumePYlZ+Mf0kNMZygs2Pk8l6s6hNku6GfuUorrT4V6xorhFhvWeKqH6oCMb8yEgdDei+HpiuHlyC3QN2tLWVoCm2Zx4u+FKtSHP1HHxeqbuBM1kT2uZHXpxa3UdLor58TOWk+3U3d3Zoa5e7oywJl0RZuM2hC+eaii2Lsgo6HSZ47YiVd7K8d2cOicHhIZXkMTs6oH7dtwWQJJunAiQoZosCpC0zMmsMEGKe5i+ArH0uvF2aLBvHlCDDF7smdZx0BeVaHWo9SdrElwnTHIj+sigeky61QMWy6wEFg4jceYUvzZdPbBm9tbxE659nUJX+MlcNT1J73PXc6wcYN51pXwrZ5PYfb9fw9WfqMeFE4G6+30swn422JbsBA72v0hFBwpH6nXE/VzPd6CtE4VucJHYJ4NEM2z60yvcqUJ0m0yp6D00pNryQoOGSGIEuBgPnlsw8bd9yQt5DKwkb/CtB5o35tmpU4IbcwB5PZzWKGI3AdIBp4BI5J9L+0wbfyMuvurmWU0y7w==
EOF

chown -R www-data.www-data /var/www/

mkdir /etc/nginx/ssl/
openssl genrsa -out /etc/nginx/ssl/bettenkunst.key 4096
cat > /etc/nginx/ssl/bettenkunst.cnf << EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_ca
prompt = no

[req_distinguished_name]
countryName = DE
stateOrProvinceName = Bayern
localityName = Wiesentheid
organizationName = Jackson IT
organizationalUnitName = Seahub
emailAddress = postmaster@$(hostname -d)

[v3_ca]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:TRUE
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = $(hostname -f)
DNS.3 = $(hostname -s)
EOF
openssl req -new -x509 -key /etc/nginx/ssl/bettenkunst.key -out /etc/nginx/ssl/bettenkunst.crt -days 10950 -config /etc/nginx/ssl/bettenkunst.cnf -sha256

systemctl restart nginx


# -------------------------------------------
# MariaDB
# -------------------------------------------
apt-get update
apt-get upgrade -y

apt-get install mariadb-server -y

SQL_ROOT_PW=$(pwgen 14 -1)

mysqladmin -u root password ${SQL_ROOT_PW}

cat > /root/.my.cnf <<EOF
[client]
user=root
password=${SQL_ROOT_PW}
EOF

chmod 600 /root/.my.cnf


# -------------------------------------------
# Web Database
# -------------------------------------------
WEB_DB_USER=$(pwgen 14 -1)
WEB_DB_PW=$(pwgen 14 -1)
WEB_DB=$(pwgen 14 -1)

cat > /var/www/.my.cnf <<EOF
[client]
user=${WEB_DB_USER}
password=${WEB_DB_PW}
EOF

chmod 600 /var/www/.my.cnf

mysql -e "CREATE DATABASE IF NOT EXISTS \`${WEB_DB}\` character set = 'utf8';"
mysql -e "create user '${WEB_DB_USER}'@'localhost' identified by '${WEB_DB_PW}';"
mysql -e "GRANT ALL PRIVILEGES ON \`${WEB_DB}\`.* to \`${WEB_DB_USER}\`;"


# -------------------------------------------
# Install PHP
# -------------------------------------------
cat > /tmp/phpmyadmin.preesed << EOF
phpmyadmin      phpmyadmin/mysql/admin-pass     password
phpmyadmin      phpmyadmin/setup-password       password
phpmyadmin      phpmyadmin/app-password-confirm password
phpmyadmin      phpmyadmin/password-confirm     password
phpmyadmin      phpmyadmin/mysql/app-pass       password
phpmyadmin      phpmyadmin/remote/host  select
phpmyadmin      phpmyadmin/internal/skip-preseed        boolean false
phpmyadmin      phpmyadmin/setup-username       string   admin
phpmyadmin      phpmyadmin/remove-error select   abort
phpmyadmin      phpmyadmin/upgrade-backup       boolean true
phpmyadmin      phpmyadmin/mysql/method select   unix socket
phpmyadmin      phpmyadmin/purge        boolean false
phpmyadmin      phpmyadmin/internal/reconfiguring       boolean false
phpmyadmin      phpmyadmin/dbconfig-upgrade     boolean true
phpmyadmin      phpmyadmin/remote/newhost       string
phpmyadmin      phpmyadmin/database-type        select   mysql
phpmyadmin      phpmyadmin/mysql/admin-user     string   root
phpmyadmin      phpmyadmin/reconfigure-webserver        multiselect
phpmyadmin      phpmyadmin/dbconfig-remove      boolean
phpmyadmin      phpmyadmin/upgrade-error        select   abort
phpmyadmin      phpmyadmin/dbconfig-reinstall   boolean false
phpmyadmin      phpmyadmin/dbconfig-install     boolean true
phpmyadmin      phpmyadmin/missing-db-package-error     select   abort
phpmyadmin      phpmyadmin/remote/port  string
phpmyadmin      phpmyadmin/db/app-user  string   phpmyadmin
phpmyadmin      phpmyadmin/install-error        select   abort
phpmyadmin      phpmyadmin/db/dbname    string   phpmyadmin
EOF

cat /tmp/phpmyadmin.preesed | debconf-set-selections

apt-get install phpmyadmin php5-fpm php5-mysqlnd php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-xmlrpc php5-xsl php-apc fcgiwrap -y


# -------------------------------------------
# Web Backup
# -------------------------------------------
cat > /usr/local/sbin/backup-var-www<< "ENDOFILE"
#!/bin/bash
#
# /usr/local/sbin/backup-var-www
#
# Copyright 2015, Alexander Jackson <alexander.jackson@jackson-it.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Uncomment to debug
#set -x

# Vars
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
HOSTNAME=$(hostname -f)
WORK_DIR_TMP=$(mktemp -d)
BACKUP_DIR=/var/www/backup/${TIMESTAMP}
EMAIL=alexander.jackson@jackson-it.de

# Create dirs
mkdir -p ${BACKUP_DIR}

# MySQL Credentials
MHOST=localhost
MUSER=root
MPASS=SQL_ROOT_PW

# MySQL Databases. Add multiple DBs separated by spaces...
DBS="WEB_DB"

# Backup DBs
for i in ${DBS}; do
  mysqldump -h ${MHOST} -u${MUSER} -p${MPASS} --opt ${i} > ${WORK_DIR_TMP}/db_${i}.sql ;
done

# Additional dump of all DBs
mysqldump -h ${MHOST} -u${MUSER} -p${MPASS} --all-databases > ${WORK_DIR_TMP}/db_all.sql


# Backup /etc and /var/www
cp -a /etc ${WORK_DIR_TMP}/dir_etc
cp -a /var/www ${WORK_DIR_TMP}/dir_var_www


# Compress etc var_www
tar czf ${BACKUP_DIR}/db_${i}.sql.tgz ${WORK_DIR_TMP}/db_${i}.sql
tar czf ${BACKUP_DIR}/db_all.sql.tgz ${WORK_DIR_TMP}/db_all.sql
tar czf ${BACKUP_DIR}/dir_etc.tgz ${WORK_DIR_TMP}/dir_etc
tar czf ${BACKUP_DIR}/dir_var_www.tgz ${WORK_DIR_TMP}/dir_var_www


# Mailbody head
cat > ${WORK_DIR_TMP}/backup-web-mailbody << EOF
Files from last backup on ${HOSTNAME} at ${TIMESTAMP}:

EOF

# Find files from current backup and add list to mailbody
find ${BACKUP_DIR} -type f | sort >> ${WORK_DIR_TMP}/backup-web-mailbody

# Mailbody foot
cat >> ${WORK_DIR_TMP}/backup-web-mailbody << EOF

There might be more archives on the server...

Visit https://XXXXX/www.${HOSTNAME}/${TIMESTAMP} for this backup. FIXME
EOF

# Send mailreport
cat ${WORK_DIR_TMP}/backup-web-mailbody | mailx -s "Backup on ${HOSTNAME} at ${TIMESTAMP}" ${EMAIL}

# Delete ${WORK_DIR_TMP}
rm -r ${WORK_DIR_TMP}

# Delete local backups older than 21 days.
find /var/www/backup/ -mindepth 1 -maxdepth 1 -type d -mtime +21 | xargs rm -rf
ENDOFILE

# Set root db password
eval "sed -i 's/SQL_ROOT_PW/${SQL_ROOT_PW}/' /usr/local/sbin/backup-web"

# Set db(s)
eval "sed -i 's/WEB_DB/${WEB_DB}/' /usr/local/sbin/backup-web"

# Change permissions
chmod 700 /usr/local/sbin/backup-var-www

# Install cronjob
line="30 * * * * /usr/local/sbin/backup-var-www"
(crontab -l; echo "$line" ) | uniq | crontab -


# -------------------------------------------
# Installation Status
# -------------------------------------------
clear
cat << EOF

  Visit website in browser for
  -----------------------------------------------------------------
  HTTP:         http://${HOSTNAME}
  HTTPS:        https://${HOSTNAME}


  Use these DB credentials
  -----------------------------------------------------------------
  DB:           ${WEB_DB}
  User:         ${WEB_DB_USER}
  Pass:         ${WEB_DB_PW}
  Host:         localhost

  phpMyAdmin:   https://phpmyadmin.${HOSTNAME}


  WordPress installation Help
  -----------------------------------------------------------------
  Site Title: ${HOSTNAME}
  Prefix:     $(pwgen -1)_
  Username:   $(pwgen -s 14 1)
  Password:   $(pwgen -ycn 14 1)
  E-mail:     webmaster@${HOSTNAME}


  SSH Credentials for ${WEB_USER}
  -----------------------------------------------------------------
  Address:  $(hostname -f) Port ${SSH_PORT}
  User:     www-data
  Pass:     not set, use private key instead

  -----------------------------------------------------------------
  Hit return to proceed with creation of safe DH for NGINX. This
  will take a very long time. Just let it run...

EOF

) 2>&1 | tee /root/$(basename ${0})_installation.log
chmod 600 /root/$(basename ${0})_installation.log
